import json

templatesh = 'utils/exploitTemplateSh'
templateget = 'utils/exploitTemplateGet'
templatepost = 'utils/exploitTemplatePost'
resultfile = 'utils/result.json'
exploittemplatename = 'exploits/exploit{}.py'
exploitshname = 'exploits/exploit{}.sh'

def error(message,err):
  print("{}\n {}".format(message,err))
  exit()


# generates GET exploit
# input:  exploit - dict of injection_point and param
#         exploit_no - to uniquely name the file
def generateGet(exploit,exploit_no):
  url_list = []
  for k,v in exploit.items():
    if k == 'injection_point':
      url_list.insert(0,v) # add to start of list
    elif k == 'param':
      url_list.append(v) # add to end of list
  url=''.join(url_list) # craft url from url_list
  content = ''
  # generate shell script to run exploit
  try:
    with open(templatesh,'r') as content:
      try:
        exploitfilename = exploitshname.format(exploit_no)
        with open(exploitfilename,'w+') as exploit_file:
          newcontent= ''
          for line in content:
            newcontent = newcontent + line
          newcontent = newcontent.format(exploit_no)
          exploit_file.write(newcontent)
      except Exception as err:
        error('ERROR: cannot write to {}'.format(exploitfilename),err)
  except Exception as err:
    error('ERROR: cannot read {}'.format(templatesh),err)

  # read GET template
  try:
    with open(templateget,'r') as content:
      try:
        exploitfilename = exploittemplatename.format(exploit_no)
        with open(exploitfilename,'w+') as exploit_file:
          newcontent = ''
          for line in content:
            newcontent = newcontent + line 
          newcontent = newcontent.format(url)
          exploit_file.write(newcontent)
      except Exception as err:
        error('ERROR: cannot write to {}'.format(exploitfilename),err)
  except Exception as err:
    error('ERROR: cannot read {}'.format(templateget),err)

def tryExploit():
  fullstring = ''

  # read results file
  try:
    with open(resultfile,'r') as results:
      for line in results:
        fullstring = fullstring+line
  except Exception as err:
    error('ERROR: cannot read {}'.format(resultfile),err)

  jsondict = json.loads(fullstring)
  exploit_no = 1;
  for exploit in jsondict:
    # GET EXPLOIT GENERATOR
    generateGet(exploit,exploit_no)
    
    # TODO POST EPXLOIT GEN

    # TODO ETC

    exploit_no = exploit_no + 1

def main():
  tryExploit()

main()
